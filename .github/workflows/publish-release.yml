name: "Publish new release"

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true # only merged pull requests must trigger this job
    steps:
      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0        # Need to deep-clone all commits
      - name: Commits
        run: |
          # Append all commit titles and authors since last tag until current
          # commit into the release template. This change is NOT committed,
          # and is only used for generating the release draft body in the next
          # step of this workflow job.
          git log $(git describe HEAD --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an' --no-merges >> ".github/RELEASE_TEMPLATE.md"

      - name: Create Release Draft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          # Names the release and tag after the version in pyproject.toml .
          tag_name: ${{env.RELEASE_VERSION}}
          release_name: ${{env.RELEASE_VERSION}}
          body_path: '.github/RELEASE_TEMPLATE.md'
          draft: true
          prerelease: false
      - name: "Get PR number"
        run: |
          echo PR_NUMBER=$(sed 's/\/merge//' <<< "${GITHUB_REF#refs/pull/}") >> $GITHUB_ENV
          echo "$PR_NUMBER"
      - name: "Mirror release PR to dev"
        uses: thomaseizinger/create-pull-request@1.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{env.RELEASE_VERSION}}
          base: dev
          title: 'Followup: Release ${{env.RELEASE_VERSION}}'
          reviewers: ${{ github.actor }} # By default, we request a review from the person who triggered the workflow.
          # Write a nice message to the user.
          # We are claiming things here based on the `publish-new-release.yml` workflow.
          # You should obviously adopt it to say the truth depending on your release workflow :)
          body: |
            Hi @${{ github.actor }}!

            Great job releasing ${{env.RELEASE_VERSION}} in PR ${{ env.PR_NUMBER }}! All that's left is to make sure `dev` is up to date with any changes introduced in the `${{ github.event.pull_request.head.ref }}` branch.
            Since you already approved the release, you can merge `${{ github.event.pull_request.head.ref }}` directly into `dev` now.
